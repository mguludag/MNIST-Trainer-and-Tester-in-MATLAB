function [net,fig, arch] = createNet(input,output,hiddenlayers)

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 24-Mar-2020 22:27:51
%
% This script assumes these variables are defined:
%
%   mnist_train_images - input data.
%   y - target data.

x = input;
t = output;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = hiddenlayers;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
jframe = view(net);

%# create it in a MATLAB figure
xval=565;
if(length(hiddenlayers)<2)
    xval=565;
else
    xval=765;
end

arch = figure('Menubar','none', 'Position',[100 100 xval 166]);
jpanel = get(jframe,'ContentPane');
[~,h] = javacomponent(jpanel);
set(h, 'units','normalized', 'position',[0 0 1 1])

%# close java window
jframe.setVisible(false);
jframe.dispose();

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
fig=figure; 
plotconfusion(t,y);
title(append('Hidden Layers (',mat2str(hiddenlayers),') Error Percent: ',num2str(percentErrors)));
%figure, plotroc(t,y)

end


